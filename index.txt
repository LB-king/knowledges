上海医保卡余额查询：http://sh.bendibao.com/zffw/2011628/62558.shtm
工程化，模块化，组件化
性能，跨终端
applet of wechat
webpack
nodejs
SSR
nuxt.js
cookie-session-localStorage
闭包
浏览器缓存机制
继承
new Object()与Object.create(null, {})的区别
webpack的理解
原型链的问题
H5新标签
vue的知识
react的应用
垃圾回收机制
this关键字的理解
页面加载如何优化
线程和进程的理解
promise的理解
async await的使用
密集型数组和稀疏型数组
图形无数据时的处理
是

基础知识
1. 讲一下vue数据绑定原理
2. vue3和vue2数据绑定原理的区别
3. vue里$set的用法和原理
4. vue里$nextTick的用法和原理
5. promise.all的用法和原理
6. 跨域的几种解决方案
7. CSRF攻击和XSS攻击的原理和预防方法
8. 浏览器的http缓存原理
9. https加密过程

项目：
1. 前端代码CI/CD是什么？是怎么实现的？
2. webpack优化用了哪些措施，『提升30%』的性能指标从何而来？
3. webpack插件和loader的区别？有没有写过插件或loader
4. 封装table+pagination组件，解决了什么问题？大数据渲染table时会遇到什么问题和解决方案



















1.注册登录功能
2.产品列表（简单点：图片+价格）
3.添加购物车

STAR 法则是指在描述中依次出现：
Situation（情景），
Task（任务），
Action（行动， 
Result（结果）信息的描述一件事的原则




work experience


XXXX
数据组管理及项目交付、需求调研分析、制定各功能模块详细实施方案，外部数据集市、客户360画像、数据治理、同位词库、企业知识仓库体系、知识图谱、黑灰名单模型、风险事件传导模型、资本市场预警模型、白名单潜客挖掘模型、产业链图谱、集团谱系等风险规则制定、详细方案设计、系统设计、ETL开发、shell脚本开发、模型代码维护、后台代码维护
工具及语言：Gbase、Oracle、hive、sqoop、neo4j、linux、shell、es、wws调度、sql、python（维护）
为银行管理者和员工提供风险数据展示及报告，通过各种信息帮助银行有效规避风险。
基于同义词的数据处理方法，个人在职申请专利1件，团队专利1件（源发风险的量化方法）

推动 CI / CD 的建设，优化了构建流程
 有良好的编码习惯，对技术有追求和热情，成就如：推动了 Code Review 体系，编写内部风格指南。
https://juejin.cn/post/6921890174842454023
https://juejin.cn/post/6844904086358212621
https://juejin.cn/post/6844903669100445710

知因智慧（2019.11-至今）
RT（2018.5-2019.11）
   主攻HMI车载系统,H
CDD（2017.4-2018.5）
PHP项目前后端分离，门店广告机大屏
易于项目管理，
广告机websocket设置心跳连接，建立重连机制，断网时
风险数据智能化应用
智慧营销系统
HMI车载系统

恒泰软件（）

做业务和基础设施



架构：
	SSR-nuxt.js
	数据安全
	代码规范
	异常捕获
	自动化测试
性能：
	图片懒加载
	移动端根据不同分辨率适配图片
	CDN加速
	webpack打包
发布部署：
	版本还原  错误捕获平台-kafka
	jenkens、pm2、nginx反向代理、本地打包
业务难点：
	重复请求
	移动端适配
	大文件断电续传
	多用户操作数据统一
	页面控制权限
	后台页面切换缓存问题
	H5页面禁止回退
	H5和App混合开发，API相互调用的问题
前端页面输入URL发生了什么？
在webview中和普通浏览器有什么区别？
前端如何做性能监控、异常监控？
前端安全方面？SQL注入，XSS，CSRF,COOKIE重复？
http、https、1.0、2.0的区别？
深度优先/广度优先？
js项目如何升级TS？
https://github.com/MisterBooo/LeetCodeAnimation


独立负责前端所有页面的开发工作(外部数据集市、客户360画像、数据治理、知识图谱等前台页面设计与开发)，需求调研分析，参与页面的设计，制定各功能模块详细实施方案，知识培训。

1.风险数据智能化
  基于XXX，我做了啥？遇到xxx问题？怎么解决的？
2.HMI车载系统
3.车大大门店系统

            基本资料

姓名：黄轶 。
Email： 280309453@qq.com 。
GitHub：https://github.com/ustbhuangyi 。


个人概况

慕课网明星讲师，Vue.js 布道者，《Vue.js 技术揭秘》 独立作者，《Vue.js 权威指南》主要作者。
热爱开源和造一流轮子，开源项目 better-scroll 作者，主导滴滴开源项目 cube-ui，建立团队技术博客。
精通前端 MVVM 框架 Vue.js，研究过其实现原理和细节，并了解其它框架如 React、Angular。
有丰富的大型网站架构经验，对前端工程化，前后端性能优化有丰富的经验。
对页面布局，HTML 语义化有深刻地理解；熟练掌握 CSS，对页面模块化开发有丰富的实战经验。
熟练掌握原生 JS 并能手写代码，对 JS 闭包、原型、作用域链、继承知识点有深刻地理解并在实际项目中运用，有丰富的 JS 面向对象编程经验。
掌握前端常用的构建工具如 Webpack、FIS、Gulp，有手写构建工具的经验。
掌握一些常见的设计模式，追求开发高质量、高可维护性的代码。
熟悉后端语言如 PHP、Node.js、.NET 等。
具有较强的学习能力、沟通能力和团队合作精神。


教育背景

2006.9 - 2010.6， 本科：北京科技大学，信息安全。
2010.9 - 2012.6， 硕士：北京科技大学，计算机科学与技术。


工作经历

2018.9 至今：Zoom 前端架构师

推进前后端分离架构方案
对 zoom web 项目的前端开发现状做了研究，分析其中的痛点和问题，然后结合 zoom web 产品的特点设计了一整套前后端分离的架构设计方案，包括了项目初始化、本地开发、联调、测试、上线等各个环节，并在多个项目中落地。通过新的架构方案，前端可以拥有最先进的开发体验，极大提升了开发效率；从项目的部署角度，前端可以独立发布部署项目，从庞大的 web 工程中解耦，可以支撑项目的快速迭代、灰度发布等。

组件库开发
基于现有开源的组件库 element-ui，开发 Vue 前端组件库 zoom-ui，适配了 zoom 这边的设计风格，并在 accessibility 方面做了很多工作。另外除了基础组件之外还针对一些业务设计了一些业务组件，极大提升了开发效率。

2015.7 - 2018.9：滴滴 WebApp 架构组前端负责人（专家工程师）。

WebApp 5.0 重构（运行在微信、支付宝、手 Q 等平台上的滴滴打车 WebApp）。
主导滴滴打车 WebApp 5.0 的技术选型、架构设计、前端工程化流程、代码开发规范；并与其它业务部门合作沟通，设计一套异步加载业务组件、动态路由的技术方案，优化了功能，提升了体验，后续产品迭代过程中在性能优化方面做了大量实践，这一系列优化措施给产品带来明显的正向收益以及订单量提升。

cube-ui（基于 Vue.js 的移动端组件库，公司第二个开源项目）。
主导 cube-ui 的代码规范、目录设计规范，参与讨论 API 组件的架构设计、后编译技术实现；负责部分复杂交互组件的开发、单元测试、文档编写、code review；负责开源的相关事宜。

小程序框架（基于微信小程序运行时基础上封装的二次开发框架）。
主导小程序框架设计、编译工具部分的开发以及框架框架周边生态圈的建设；解决原生小程序不具备的组件化开发、NPM 包支持、数据状态管理等核心诉求，解决公司多个业务线共同开发协作的问题，成为公司级别的小程序开发框架。

通用 JS 库（公司级别的前端 JSSDK，原生 JS 实现）。
负责设计和开发公司级别的 H5 统一登录 JSSDK，打通移动端各个页面的登录态。
负责设计和开发公司级别的统一地图 JSSDK，对高德地图和腾讯地图做了封装，对外提供统一友好的接口。
负责设计和开发公司级别的 Web 与 Native 交互的 JSBridge SDK，抹平了 iOS 和 Android 端通讯交互差异，对外提供统一友好的接口。
负责设计和开发抹平渠道（微信、支付宝、手 Q）差异的 JSSDK，对基础功能做了二次封装，对外提供提供统一友好的接口。

WebApp 4.0 （运行在微信、支付宝、手 Q 等平台上的滴滴打车 WebApp）。
主导滴滴打车 WebApp 4.0 的技术选型、架构设计、前端工程化流程、组件化开发模式及业务线接入方案，为业务线接入组件设计了一套完整的生命周期和开发规范，方便业务线快速接入主流程，并开发了一套基于 zepto 的移动端组件库。

2012.6 - 2015.7：百度网址导航事业部前端负责人（高级研发工程师）。

Hao123 前端架构。
设计实现了满足亿级 PV 的前端架构，运行时结合 Smarty 模板实现了 Pagelet、Quickling、Bigrender，使得页面可以分块加载、渲染，在保证最佳性能的同时不影响开发习惯和效率；同时构建工具在百度 FIS 的基础上二次开发，并尝试写过 Gulp 插件和运行时完美配合。

Hao123 前端游戏框架。
开发多个基于原生 DOM 的网页游戏，并在此基础上抽象出一些场景、舞台、精灵、帧动画库、任务链、时间轴等概念，形成一套开发 DOM 游戏的框架。


